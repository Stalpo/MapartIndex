// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid()) @map("_id")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  username     String       @unique
  hashedPw     String?
  mapIds       MapId[]
  mapArts      MapArt[]
  Profile      Profile?
  discordId    String?
  admin        Boolean      @default(false)
  mod          Boolean      @default(false)
  apiKey       String?
}

model Profile {
  id           String       @id @default(uuid()) @map("_id")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @unique
  username     String       @unique
  lastSeen     DateTime     @default(now())
  location     String?
  email        String?
  bio          String?
  avatar       String?
  links        String[]
  mcUuid       String?
  views        Int          @default(0)
  favorites    Favorites[]
}

model MapArt {
  id           String       @id @default(uuid()) @map("_id")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  username     String?
  artist       String?      @default("N/A")
  server       String?
  serverId     Int?
  displayName  String?
  imgUrl       String
  name         String
  description  String
  mapIds       MapId[]
  mapIdsCount  Int?         @map("mapIdsCount")
  hash         String?
  nsfw         Boolean      @default(false)
  tags         String[]
  views        Int          @default(0)
  likes        Int          @default(0)
  favorites    Favorites[]
}

model MapId {
  id           String       @id @default(uuid()) @map("_id")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  username     String?
  artist       String?      @default("N/A")
  server       String?
  serverId     Int?
  displayName  String?
  map          MapArt?      @relation(fields: [mapId], references: [id])
  mapId        String?
  imgUrl       String
  hash         String
  nsfw         Boolean      @default(false)
  views        Int          @default(0)
}

// favorites many-to-many model
model Favorites {
  id           String       @id @default(uuid()) @map("_id")
  createdAt    DateTime     @default(now())
  profile      Profile      @relation(fields: [profileId], references: [id])
  profileId    String
  mapArt       MapArt       @relation(fields: [mapArtId], references: [id])
  mapArtId     String

  @@unique([profileId, mapArtId])
}