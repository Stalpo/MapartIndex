// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  hashedPw  String?
  mapIds    MapId[]
  mapArts   MapArt[]
  Profile   Profile?
  discordId String?
}

model Profile {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  username  String   @unique
  lastSeen  DateTime @default(now())
  location  String?
  email     String?
  bio       String?
  avatar    String?
  links     String[]
  mcUuid    String?
}

model MapArt {
  id            String   @id @default(uuid()) @map("_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  uploader      String   @default("N/A")
  uploaderUser  User?    @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId    String?
  artist        String?
  imgUrl        String
  name          String
  description   String
  mapIds        MapId[]
  rotations     Int[]    // 0-3 rotation
  hSize         Int
  vSize         Int
  nsfw          Boolean  @default(false)
}

model MapId {
  id            String   @id @default(uuid()) @map("_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  uploader      String   @default("N/A")
  uploaderUser  User?    @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId    String?
  artist        String?
  Map           MapArt?  @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId         String?
  imgUrl        String
  hash          String   @unique
  nsfw          Boolean  @default(false)
}