doctype html
html
  - const pageTitle = "Administration"
  include includes/head.pug
  body
    include includes/navbar.pug
    div.container
      h1.text-center= pageTitle
      if !admin
        div.alert.alert-danger(role="alert")
          | You are not an administrator
      else
        form#selectorsForm
          div.row
            div.col
              select#userSelector.form-control(data-live-search='true')
            div.col
              select#artistSelector.form-control(data-live-search='true')
            div.col
              select#sortSelector.form-control

        hr

        table.table.table-striped#mapsTable
          thead
            tr
              th Display Name
              th Created At
              th Username
              th Image
              th Artist
              th NSFW
              th Actions

          tbody(id='mapsTableBody')

        if admin
          include includes/admin-menu.pug

        script.
          // Function to populate a select element and optionally set a default selection
          function populateSelect(selectId, options, defaultOption = "") {
            const select = document.getElementById(selectId);
            select.innerHTML = "";

            options.forEach(option => {
              const optElement = document.createElement("option");
              optElement.value = option;
              optElement.textContent = option;
              if (option === defaultOption) {
                optElement.selected = true;
              }
              select.appendChild(optElement);
            });
            $(`#${selectId}`).selectpicker('refresh');
          }

          // Function to populate user selector
          async function populateUserSelector() {
            try {
              const uniqueUsernamesMapId = await fetchData('/mapid/uniqueUsernames');
              const uniqueUsernamesMapArt = await fetchData('/mapart/uniqueUsernames');
              
              // Combining and deduplicating usernames
              let combinedUniqueUsernames = [...new Set([...uniqueUsernamesMapId, ...uniqueUsernamesMapArt])];
              combinedUniqueUsernames.sort(); // Sorting the usernames alphabetically

              // Ensure "All Users" is first in the list
              combinedUniqueUsernames.unshift("All Users");

              // Call populateSelect with the updated array
              populateSelect('userSelector', combinedUniqueUsernames);
            } catch (error) {
              console.error('Error fetching user data:', error);
            }
          }

          // Function to populate artist selector
          async function populateArtistSelector() {
            try {
              const uniqueArtistsMapId = await fetchData('/mapid/uniqueArtists');
              const uniqueArtistsMapArt = await fetchData('/mapart/uniqueArtists');
              
              const combinedUniqueArtists = [...new Set([...uniqueArtistsMapId, ...uniqueArtistsMapArt])];

              let uniqueArtists = combinedUniqueArtists.reduce((acc, artistString) => {
                return acc.concat(artistString.split(',').map(artist => artist.trim()).filter(artist => artist !== ''));
              }, []);

              // Remove duplicates from the combined list
              uniqueArtists = [...new Set(uniqueArtists)];
              // Ensure "All Artists" is first in the list
              uniqueArtists.unshift("All Artists");
              // Sort the array, ensuring "All Artists" remains at the top
              uniqueArtists.sort((a, b) => (a === "All Artists" ? -1 : b === "All Artists" ? 1 : a.localeCompare(b)));

              populateSelect('artistSelector', uniqueArtists, "All Artists");
            } catch (error) {
              console.error('Error fetching artist data:', error);
            }
          }


          async function populateSortSelector() {
            const sortSelector = document.getElementById('sortSelector');

            const options = [
              { value: 'nameAsc', label: 'Name (Ascending)' },
              { value: 'nameDesc', label: 'Name (Descending)' },
              { value: 'dateAsc', label: 'Date (Ascending)' },
              { value: 'dateDesc', label: 'Date (Descending)', selected: true }
            ];

            options.forEach(option => {
              const sortOption = document.createElement('option');
              sortOption.value = option.value;
              sortOption.textContent = option.label;
              if (option.selected) {
                sortOption.setAttribute('selected', true);
              }
              sortSelector.appendChild(sortOption);
            });
            $(sortSelector).selectpicker('refresh');
          }

          // Function to fetch data from the API
          async function fetchData(url) {
            try {
              const response = await fetch(url);
              if (!response.ok) {
                if (response.status === 404) {
                  // Set the corresponding flag if 404 status is encountered
                  if (url.includes('/mapid/')) {
                    mapId404 = true;
                  } else if (url.includes('/mapart/')) {
                    mapArt404 = true;
                  }
                  console.error('Likely last page of results');
                  return null; // Return null when 404 status is encountered
                } else {
                  throw new Error('Network response was not ok');
                }
              }
              return await response.json();
            } catch (error) {
              console.error('Error fetching map data:', error);
              return null;
            }
          }

          // Function to handle API call with updated parameters
          async function fetchMaps(page = 1, user = "", artist = "", sort = "dateDesc") {

            const perPage = 25;
            let mapIdData = [];
            let mapArtData = [];

            // Fetch data for mapId endpoint if not encountered 404 status
            if (!mapId404) {
              let mapIdUrl = `/api/mapId/maps?page=${page}&perPage=${perPage}&sort=${sort}`;
              // Construct user and artist parameters conditionally
              const userParam = (user && user !== "All Users") ? `&user=${user}` : "";
              const artistParam = (artist && artist !== "All Artists") ? `&artist=${artist}` : "";
              mapIdUrl += userParam + artistParam;
              // Fetch data
              const mapIdResponse = await fetchData(mapIdUrl);

              if (mapIdResponse !== null) {
                mapIdData = mapIdResponse;
              }
            }

            // Fetch data for mapArt endpoint if not encountered 404 status
            if (!mapArt404) {
              let mapArtUrl = `/api/mapArt/maps?page=${page}&perPage=${perPage}&sort=${sort}`;
              // Construct user and artist parameters conditionally
              const userParam = (user && user !== "All Users") ? `&user=${user}` : "";
              const artistParam = (artist && artist !== "All Artists") ? `&artist=${artist}` : "";
              mapArtUrl += userParam + artistParam;
              // Fetch data
              const mapArtResponse = await fetchData(mapArtUrl);
              if (mapArtResponse !== null) {
                mapArtData = mapArtResponse;
              }
            }
            const loadingSpinner = document.getElementById('loadingSpinner');
            loadingSpinner.style.display = 'none';
            // Combine data into a unique array
            const combinedData = [...mapIdData, ...mapArtData];
            buildTable(combinedData);



            // Start observing intersection once grid is populated
            startObservingIntersection();
          }

          // Flags to track if each API endpoint has encountered a 404 status
          let mapId404 = false;
          let mapArt404 = false;

          // Function to handle selector and view selector change events
          function handleSelectorChange() {
            currentPage = 1; // Reset currentPage to 1
            const user = document.getElementById('userSelector').value;
            const artist = document.getElementById('artistSelector').value;
            const sort = document.getElementById('sortSelector').value;

            // Reset flags for API endpoints
            mapId404 = false;
            mapArt404 = false;

            // Clear the grid before fetching new data
            clearGrid();

            // Pass selected view type to fetchMaps
            fetchMaps(1, user, artist, sort);
          }

          // Function to clear the grid
          function clearGrid() {
            const gridContainer = document.getElementById('mapsTableBody');
            gridContainer.innerHTML = '';
          }

          // Attach event listeners to input selectors
          document.getElementById('userSelector').addEventListener('change', handleSelectorChange);
          document.getElementById('artistSelector').addEventListener('change', handleSelectorChange);
          document.getElementById('sortSelector').addEventListener('change', handleSelectorChange);

          // Function to build the table
          function buildTable(maps) {
            const tableBody = document.getElementById('mapsTableBody');

            // Build new rows
            maps.forEach(map => {
              const newRow = document.createElement('tr');
              newRow.className = 'vertical-center';

              const imgUrl = map.displayName.includes("MAPART") ? `/public/uploads/mapart/${map.imgUrl}` : `/public/uploads/${map.imgUrl}`;
              const viewUrl = map.displayName.includes("MAPART") ? `/mapart/id/${map.id}` : `/mapid/id/${map.id}`;
              const editUrl = map.displayName.includes("MAPART") ? `/mapart/edit/${map.id}` : `/mapid/edit/${map.id}`;
              const deleteUrl = map.displayName.includes("MAPART") ? `/mapart/delete?mapId=${map.id}` : `/mapid/delete?mapId=${map.id}`;

              // Clean up artist names
              const cleanedArtists = map.artist.split(',')
                .map(artist => artist.trim())
                .filter(artist => artist.length > 0)
                .join(', ');

              newRow.innerHTML = `
                <td>${map.displayName}</td>
                <td>${new Date(map.createdAt).toLocaleString('en-US')}</td>
                <td>${map.username}</td>
                <td><img src="${imgUrl}" alt="Map Image" style="max-width: 100px; max-height: 100px;"></td>
                <td>${cleanedArtists}</td>
                <td>${map.nsfw}</td>
                <td>
                  <div class='btn-group' role='group' aria-label='Buttons'>
                    <button class='btn btn-primary' type='button' onclick="location.href='${viewUrl}'"><i class='fa fa-eye'></i></button>
                    <button class='btn btn-primary' type='button' onclick="location.href='${editUrl}'"><i class='fa fa-pencil-alt'></i></button>
                    <button class='btn btn-danger' type='button' onclick="location.href='${deleteUrl}'"><i class='fa fa-trash'></i></button>
                  </div>
                </td>
              `;
              tableBody.appendChild(newRow);
            });
          }

          // Lazy loading
          let observer;
          let currentPage = 1;
          let user = "";
          let artist = "";
          let sort = "dateDesc";

          function startObservingIntersection() {
            observer = new IntersectionObserver(entries => {
              if (entries[0].isIntersecting) {
                fetchNextPage();
              }
            }, {
              root: null,
              rootMargin: '0px',
              threshold: 1.0
            });

            const lastGridElement = document.getElementById('mapsTableBody').lastElementChild;
            observer.observe(lastGridElement);
          }

          async function fetchNextPage() {
            currentPage++;
            sort = document.getElementById('sortSelector').value;
            const lastGridElement = document.getElementById('mapsTableBody').lastElementChild;
            observer.unobserve(lastGridElement);
            fetchMaps(currentPage, user, artist, sort);
          }

          // Call the function to populate selectors and fetch initial data when the page loads
          document.addEventListener('DOMContentLoaded', () => {
            $('select').selectpicker();

            populateUserSelector();
            populateArtistSelector();
            populateSortSelector();
            // Initial API call on page load
            fetchMaps();
          });

        // Grid container for images
        div#gridContainer.row.mb-4

        // Keep loadingSpinner at bottom of page
        script.
          function createLoadingSpinner() {
            const loadingSpinner = document.createElement('div');
            loadingSpinner.id = 'loadingSpinner';
            loadingSpinner.className = 'text-center mt-4';
            
            const spinnerIcon = document.createElement('i');
            spinnerIcon.className = 'fa fa-spinner fa-spin fa-3x';
            
            const loadingText = document.createElement('p');
            loadingText.textContent = 'Loading...';
            
            loadingSpinner.appendChild(spinnerIcon);
            loadingSpinner.appendChild(loadingText);
            
            return loadingSpinner;
          }

          const container = document.querySelector('.container');
          const loadingSpinner = createLoadingSpinner();
          container.appendChild(loadingSpinner);

        style.
          .pixelated-image {
            image-rendering: pixelated;
          };

      include includes/scripts.pug