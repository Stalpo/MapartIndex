doctype html
html
  - const pageTitle = "Administration"
  include includes/head.pug
  body
    include includes/navbar.pug
    div.container
      h1.text-center= pageTitle
      if !admin
        div.alert.alert-danger(role="alert")
          | You are not an administrator
      else
        form
          div.row
            div.col
              div.form-group
                label.sr-only(for='userSelector') Select User:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text User
                  select#userSelector.form-control
            div.col
              div.form-group
                label.sr-only(for='artistSelector') Select Artist:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Artist
                  select#artistSelector.form-control
            div.col
              div.form-group
                label.sr-only(for='sortSelector') Sort By:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Sort
                  select#sortSelector.form-control

        table.table.table-striped#mapsTable
          thead
            tr
              th ID
              th Created At
              th Username
              th Image
              th Artist
              th NSFW
              th Actions

          tbody(id='mapsTableBody')

        script.
          // Function to fetch data from the API
          async function fetchData(url) {
            const response = await fetch(url);
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          }

          // Function to populate select element with options
          function populateSelect(selectorId, data) {
            const selector = document.getElementById(selectorId);
            selector.innerHTML = ''; // Clear previous options
            data.forEach(item => {
              const option = document.createElement('option');
              option.text = item;
              selector.add(option);
            });
          }

          // Function to populate user selector
          async function populateUserSelector() {
            try {
              const uniqueUsernames = await fetchData('/mapId-info/uniqueUsernames');
              uniqueUsernames.unshift("All Users");
              populateSelect('userSelector', uniqueUsernames);
            } catch (error) {
              console.error('Error fetching user data:', error);
            }
          }

          // Function to populate artist selector
          async function populateArtistSelector() {
            try {
              const uniqueArtists = await fetchData('/mapId-info/uniqueArtists');
              uniqueArtists.unshift("All Artists");
              populateSelect('artistSelector', uniqueArtists);
            } catch (error) {
              console.error('Error fetching artist data:', error);
            }
          }

          async function populateSortSelector() {
            const sortSelector = document.getElementById('sortSelector');

            const options = [
              { value: 'nameAsc', label: 'Name (Ascending)' },
              { value: 'nameDesc', label: 'Name (Descending)' },
              { value: 'dateAsc', label: 'Date (Ascending)' },
              { value: 'dateDesc', label: 'Date (Descending)', selected: true }
            ];

            options.forEach(option => {
              const sortOption = document.createElement('option');
              sortOption.value = option.value;
              sortOption.textContent = option.label;
              if (option.selected) {
                sortOption.setAttribute('selected', true);
              }
              sortSelector.appendChild(sortOption);
            });
          }

          // Function to handle API call with updated parameters
          async function fetchMaps(page = 1, user = "", artist = "", sort = "dateDesc") {
            const perPage = 25;
            let url = `/api/mapId/maps?page=${page}&perPage=${perPage}&sort=${sort}`;
            // Construct URL based on selected values
            if (user && user !== "All Users") {
              url += `&user=${user}`;
            }
            if (artist && artist !== "All Artists") {
              url += `&artist=${artist}`;
            }

            // Show loading spinner
            document.getElementById('loadingSpinner').style.display = 'block';

            try {
              const response = await fetch(url);
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              const data = await response.json();
              // Update the UI with the fetched maps
              buildTable(data);
              console.log(data);

              // Start observing intersection once grid is populated
              startObservingIntersection();
            } catch (error) {
              console.error('Error fetching map data:', error);
            } finally {
              // Hide loading spinner regardless of success or failure
              document.getElementById('loadingSpinner').style.display = 'none';
            }
          }

          // Function to handle input selector change events
          function handleSelectorChange() {
            const user = document.getElementById('userSelector').value;
            const artist = document.getElementById('artistSelector').value;
            const sort = document.getElementById('sortSelector').value;
            
            // Clear the grid before fetching new data
            clearGrid();

            fetchMaps(1, user, artist, sort);
          }

          // Function to clear the grid
          function clearGrid() {
            const gridContainer = document.getElementById('mapsTableBody');
            gridContainer.innerHTML = '';
          }

          // Attach event listeners to input selectors
          document.getElementById('userSelector').addEventListener('change', handleSelectorChange);
          document.getElementById('artistSelector').addEventListener('change', handleSelectorChange);
          document.getElementById('sortSelector').addEventListener('change', handleSelectorChange);

          // Function to build the table
          function buildTable(maps) {
            const tableBody = document.getElementById('mapsTableBody');

            // Build new rows
            maps.forEach(map => {
              const newRow = document.createElement('tr');
              newRow.className = 'vertical-center';
              newRow.innerHTML = `
                <td>...${map.id.slice(-12)}</td>
                <td>${new Date(map.createdAt).toLocaleString('en-US')}</td>
                <td>${map.username}</td>
                <td><img src="/public/uploads/${map.imgUrl}" alt="Map Image" style="max-width: 100px; max-height: 100px;"></td>
                <td>${map.artist}</td>
                <td>${map.nsfw}</td>
                <td>
                  <div class='btn-group' role='group' aria-label='Buttons'>
                    <button class='btn btn-primary' type='button' onclick="location.href='/mapId/${map.id}'"><i class='fa fa-eye'></i></button>
                    <button class='btn btn-primary' type='button' onclick="location.href='/mapId-edit/${map.id}'"><i class='fa fa-pencil-alt'></i></button>
                    <button class='btn btn-danger' type='button' onclick="location.href='/deleteMapId?mapId=${map.id}'"><i class='fa fa-trash'></i></button>
                  </div>
                </td>
              `;
              tableBody.appendChild(newRow);
            });
          }

          // Lazy loading
          let observer;
          let currentPage = 1;
          let user = "";
          let artist = "";
          let sort = "dateDesc";

          function startObservingIntersection() {
            observer = new IntersectionObserver(entries => {
              if (entries[0].isIntersecting) {
                fetchNextPage();
              }
            }, {
              root: null,
              rootMargin: '0px',
              threshold: 1.0
            });

            const lastGridElement = document.getElementById('mapsTableBody').lastElementChild;
            observer.observe(lastGridElement);
          }

          async function fetchNextPage() {
            currentPage++;
            sort = document.getElementById('sortSelector').value;
            const lastGridElement = document.getElementById('mapsTableBody').lastElementChild;
            observer.unobserve(lastGridElement);
            fetchMaps(currentPage, user, artist, sort);
          }

          // Call the function to populate selectors and fetch initial data when the page loads
          document.addEventListener('DOMContentLoaded', () => {
            populateUserSelector();
            populateArtistSelector();
            populateSortSelector();
            // Initial API call on page load
            fetchMaps();
          });

        // Grid container for images
        div#gridContainer.row.mb-4

        // Keep loadingSpinner at bottom of page
        script.
          function createLoadingSpinner() {
            const loadingSpinner = document.createElement('div');
            loadingSpinner.id = 'loadingSpinner';
            loadingSpinner.className = 'text-center mt-4';
            
            const spinnerIcon = document.createElement('i');
            spinnerIcon.className = 'fa fa-spinner fa-spin fa-3x';
            
            const loadingText = document.createElement('p');
            loadingText.textContent = 'Loading...';
            
            loadingSpinner.appendChild(spinnerIcon);
            loadingSpinner.appendChild(loadingText);
            
            return loadingSpinner;
          }

          const container = document.querySelector('.container');
          const loadingSpinner = createLoadingSpinner();
          container.appendChild(loadingSpinner);

        style.
          .pixelated-image {
            image-rendering: pixelated;
          };

      include includes/scripts.pug