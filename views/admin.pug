doctype html
html
  - const pageTitle = "Administration"
  include includes/head.pug
  body
    include includes/navbar.pug
    div.container
      h1.text-center= pageTitle
      if !admin
        div.alert.alert-danger(role="alert")
          | You are not an administrator
      else

        style.
          .vertical-center td {
            vertical-align: middle;
          }

        script.
          document.addEventListener('DOMContentLoaded', function() {
            // Make API call to get maps
            fetch('/api/mapId/maps')
              .then(response => response.json())
              .then(data => {
                buildTable(data);
                buildUserSelector(data);
                buildArtistSelector(data);
                buildSortSelector(data);
                document.getElementById('loadingSpinner').style.display = 'none';
              })
            .catch(error => {
              console.error('Error fetching data:', error);
              document.getElementById('loadingSpinner').innerHTML = '<div class="alert alert-danger" role="alert">Error fetching data</div>';
            });

            function buildTable(maps) {
              const tableBody = document.getElementById('mapsTableBody');

              // Clear existing rows
              tableBody.innerHTML = '';

              // Build new rows
              maps.forEach(map => {
                const newRow = document.createElement('tr');
                newRow.className = 'vertical-center'; // Add a class for styling
                newRow.innerHTML = `
                  <td>...${map.id.slice(-12)}</td>
                  <td>${new Date(map.createdAt).toLocaleString('en-US')}</td>
                  <td>${map.username}</td>
                  <td><img src="/public/uploads/${map.imgUrl}" alt="Map Image" style="max-width: 100px; max-height: 100px;"></td>
                  <td>${map.artist}</td>
                  <td>${map.nsfw}</td>
                  <td>
                    <div class='btn-group' role='group' aria-label='Buttons'>
                      <button class='btn btn-primary' type='button' onclick="location.href='/mapId/${map.id}'"><i class='fa fa-eye'></i></button>
                      <button class='btn btn-primary' type='button' onclick="location.href='/mapId-edit/${map.id}'"><i class='fa fa-pencil-alt'></i></button>
                      <button class='btn btn-danger' type='button' onclick="location.href='/deleteMapId?mapId=${map.id}'"><i class='fa fa-trash'></i></button>
                    </div>
                  </td>
                `;
                tableBody.appendChild(newRow);
              });
            }

            function buildUserSelector(maps) {
              const userSelector = document.getElementById('userSelector');
              const uniqueUsers = [...new Set(maps.map(map => map.username || map.userId))];

              const allOption = document.createElement('option');
              allOption.value = '';
              allOption.textContent = 'All Users';
              userSelector.appendChild(allOption);

              uniqueUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user;
                option.textContent = user;
                userSelector.appendChild(option);
              });

              // Add event listener for input change
              userSelector.addEventListener('change', function() {
                const selectedUser = this.value;
                const selectedArtist = document.getElementById('artistSelector').value;
                const selectedSort = document.getElementById('sortSelector').value;
                const filteredMaps = maps.filter(map => 
                  (selectedUser === '' || map.username === selectedUser || map.userId === selectedUser) &&
                  (selectedArtist === '' || map.artist === selectedArtist)
                );

                applySortAndBuildTable(filteredMaps, selectedSort);
              });
            }

            function buildArtistSelector(maps) {
              const artistSelector = document.getElementById('artistSelector');
              const uniqueArtists = [...new Set(maps.map(map => map.artist))];

              const allOption = document.createElement('option');
              allOption.value = '';
              allOption.textContent = 'All Artists';
              artistSelector.appendChild(allOption);

              uniqueArtists.forEach(artist => {
                const option = document.createElement('option');
                option.value = artist;
                option.textContent = artist;
                artistSelector.appendChild(option);
              });

              // Add event listener for input change
              artistSelector.addEventListener('change', function() {
                const selectedArtist = this.value;
                const selectedUser = document.getElementById('userSelector').value;
                const selectedSort = document.getElementById('sortSelector').value;
                const filteredMaps = maps.filter(map => 
                  (selectedUser === '' || map.username === selectedUser || map.userId === selectedUser) &&
                  (selectedArtist === '' || map.artist === selectedArtist)
                );

                applySortAndBuildTable(filteredMaps, selectedSort);
              });
            }

            function buildSortSelector(maps) {
              const sortSelector = document.getElementById('sortSelector');

              const options = [
                { value: 'nameAsc', label: 'Name (Ascending)' },
                { value: 'nameDesc', label: 'Name (Descending)' },
                { value: 'dateAsc', label: 'Date (Ascending)' },
                { value: 'dateDesc', label: 'Date (Descending)' }
              ];

              options.forEach(option => {
                const sortOption = document.createElement('option');
                sortOption.value = option.value;
                sortOption.textContent = option.label;
                sortSelector.appendChild(sortOption);
              });

              // Add event listener for input change
              sortSelector.addEventListener('change', function() {
                const selectedSort = this.value;
                const selectedUser = document.getElementById('userSelector').value;
                const selectedArtist = document.getElementById('artistSelector').value;
                const filteredMaps = maps.filter(map => 
                  (selectedUser === '' || map.username === selectedUser || map.userId === selectedUser) &&
                  (selectedArtist === '' || map.artist === selectedArtist)
                );

                applySortAndBuildTable(filteredMaps, selectedSort);
              });
            }

            function applySortAndBuildTable(maps, selectedSort) {
              let sortedMaps;

              switch (selectedSort) {
                case 'nameAsc':
                  sortedMaps = [...maps].sort((a, b) => a.artist.localeCompare(b.artist));
                  break;
                case 'nameDesc':
                  sortedMaps = [...maps].sort((a, b) => b.artist.localeCompare(a.artist));
                  break;
                case 'dateAsc':
                  sortedMaps = [...maps].sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                  break;
                case 'dateDesc':
                  sortedMaps = [...maps].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                  break;
                default:
                  sortedMaps = maps;
              }

              buildTable(sortedMaps);
            }
          });

        form
          div.row
            div.col
              div.form-group
                label.sr-only(for='userSelector') Select User:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text User
                  select#userSelector.form-control
            div.col
              div.form-group
                label.sr-only(for='artistSelector') Select Artist:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Artist
                  select#artistSelector.form-control
            div.col
              div.form-group
                label.sr-only(for='sortSelector') Sort By:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Sort
                  select#sortSelector.form-control

        table.table.table-striped#mapsTable
          thead
            tr
              th ID
              th Created At
              th Username/UserId
              th Image
              th Artist
              th NSFW
              th Actions

          tbody(id='mapsTableBody')

        div#loadingSpinner.text-center.mt-4
          i.fa.fa-spinner.fa-spin.fa-3x
          p Loading...

        // Add the user list modal structure
        div.modal#userListModal(tabindex='-1' role='dialog')
          div.modal-dialog(role='document')
            div.modal-content
              div.modal-header
                h5.modal-title User List
                button.close(type='button', data-dismiss='modal', aria-label='Close')
                  span(aria-hidden='true') Ã—
              div.modal-body
                ul#userList(class='list-group')
                  // User list items will be dynamically added here
              div.modal-footer
                button.btn.btn-secondary(type='button', data-dismiss='modal') Close

        script.
          document.addEventListener('DOMContentLoaded', function() {
            // Add button to open user list modal to the navbar
            const navbarTitle = document.querySelector('.navbar-brand');
            const userModalButton = document.createElement('button');
            userModalButton.className = 'btn btn-primary';
            userModalButton.textContent = 'User Menu';
            userModalButton.setAttribute('type', 'button');
            userModalButton.setAttribute('data-toggle', 'modal');
            userModalButton.setAttribute('data-target', '#userListModal');
            navbarTitle.parentNode.insertBefore(userModalButton, navbarTitle.nextSibling);
          });
      
          document.addEventListener('DOMContentLoaded', function() {
            const userListButton = document.getElementById('userListButton');
            const userListModal = new bootstrap.Modal(document.getElementById('userListModal'));
            const userList = document.getElementById('userList');

            userListButton.addEventListener('click', function() {
              fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                  // Clear existing list items
                  userList.innerHTML = '';

                  // Build new list items
                  users.forEach(user => {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item';
                    listItem.textContent = user.username;
                    userList.appendChild(listItem);
                  });

                  userListModal.show(); // Show the modal after fetching and building the list
                })
                .catch(error => {
                  console.error('Error fetching user data:', error);
                  // Handle error if needed
                });
            });
          });


      include includes/scripts.pug
