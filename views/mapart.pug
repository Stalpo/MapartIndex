doctype html
html
  - const pageTitle = "MapArt Stitching"
  include includes/head.pug
  body
    include includes/navbar.pug
    script(src="/public/js/joinImages.js")
    div.container.text-center
      h1= pageTitle
      hr
      .row
        .col
          div.form-group
            label.sr-only(for='width') Width:
            div.input-group.mb-2.mr-sm-2
              div.input-group-prepend
                div.input-group-text Width
              select#width.form-control
                for i in [...Array(32).keys()]
                  option(value=`${i+1}`)= `${i+1}`
        .col
          div.form-group
            label.sr-only(for='height') Height:
            div.input-group.mb-2.mr-sm-2
              div.input-group-prepend
                div.input-group-text Height
              select#height.form-control
                for i in [...Array(32).keys()]
                  option(value=`${i+1}`)= `${i+1}`

      div#inputContainer

      .row
        .col
          div.form-group
            button#fetchImages.btn.btn-primary Fetch and Build MapArt

      hr
      div#outputContainer

      script.
        // Get references to width and height selectors
        const widthSelector = document.getElementById('width');
        const heightSelector = document.getElementById('height');
        const fetchButton = document.getElementById('fetchImages');

        // Add event listener to both selectors to handle changes
        widthSelector.addEventListener('change', generateInputs);
        heightSelector.addEventListener('change', generateInputs);

        // Function to generate text input boxes based on selected dimensions
        function generateInputs() {
          const width = parseInt(widthSelector.value);
          const height = parseInt(heightSelector.value);
          const totalInputs = width * height;

          const container = document.getElementById('inputContainer');
          container.innerHTML = ''; // Clear previous inputs

          for (let i = 0; i < totalInputs; i++) {
            const inputGroup = document.createElement('div');
            inputGroup.classList.add('form-group');
            
            const input = document.createElement('input');
            input.type = 'text';
            input.classList.add('form-control');
            input.placeholder = `mapId uuid ${i + 1}`;

            inputGroup.appendChild(input);
            container.appendChild(inputGroup);
          }
        }

        // Function to fetch images based on UUIDs
        function fetchImages() {
          return new Promise((resolve, reject) => {
            const inputs = document.querySelectorAll('#inputContainer input');
            const promises = []; // Array to store all fetch promises
            
            inputs.forEach(input => {
              const uuid = input.value;
              if (uuid) {
                const promise = fetch(`/api/mapId/${uuid}`)
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Network response was not ok');
                    }
                    return response.json();
                  })
                  .then(data => {
                    // Handle the JSON data, e.g., collect image URLs
                    return data.imgUrl ? `/public/uploads/${data.imgUrl}` : null; // Prepend '/public/uploads/' to each URL
                  })
                  .catch(error => {
                    console.error('Error fetching data:', error.message);
                    return null; // Return null if fetch fails
                  });

                promises.push(promise); // Push each fetch promise into the array
              }
            });

            // Wait for all fetch promises to resolve
            Promise.all(promises)
              .then(imgUrls => {
                resolve(imgUrls.filter(url => url !== null)); // Resolve with the array of image URLs
              })
              .catch(error => {
                reject(error); // Reject with the error if any fetch fails
              });
          });
        }

        fetchButton.addEventListener('click', () => {
          fetchImages()
            .then(imgUrls => {
              // imgUrls is an array containing all the image URLs
              return joinImages(parseInt(widthSelector.value), parseInt(heightSelector.value), imgUrls.filter(url => url !== null));
            })
            .then(resultImageUrl => {
              // Use the resulting image URL, display it in an img tag
              const outputContainer = document.getElementById('outputContainer');
              outputContainer.innerHTML = ""; // Clear output
              const resultImage = document.createElement('img');
              resultImage.src = resultImageUrl;
              outputContainer.appendChild(resultImage);
            })
            .catch(error => {
              console.error('Error fetching images:', error);
            });
        });


        // Initial generation on page load
        generateInputs();
