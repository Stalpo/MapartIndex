doctype html
html
  - const pageTitle = "Map Art: " + mapId
  include includes/head.pug
  body
    include includes/navbar.pug
    
    .container
      h1.text-center Map Art
      hr
      
      #mapContainer.text-center
        i#loadingSpinner.fa.fa-spinner.fa-spin.fa-3x
        p Loading map data...

      if admin || mod
        .text-center
          a.btn.btn-primary(href=`/mapart/edit/${mapId}`) Visit Map Edit Page

      script.
        function handleFavorite(mapId, action) {
          const btn = document.querySelector('#favoriteButton');
          const isCurrentlyFavorite = btn.textContent === 'Unfavorite';
          const method = isCurrentlyFavorite ? 'DELETE' : 'POST';
          fetch(`/mapart/favorite/${mapId}`, { method: method })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to perform action');
              }
              btn.textContent = isCurrentlyFavorite ? 'Favorite' : 'Unfavorite';
            })
            .catch(error => console.error('Error:', error));
        }

        function handleLike(mapId, action) {
          const btn = document.querySelector('#likeButton');
          const isCurrentlyLiked = btn.textContent === 'Unlike';
          const method = isCurrentlyLiked ? 'DELETE' : 'POST';
          fetch(`/mapart/like/${mapId}`, { method: method })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to perform action');
              }
              btn.textContent = isCurrentlyLiked ? 'Like' : 'Unlike';
              return response.json();
            })
            .then(data => {
              document.getElementById('likeCount').textContent = parseInt(data.mapArt.likedBy.length);
            })
            .catch(error => console.error('Error:', error));
        }

        function checkFavorite(userId, mapId) {
          const btn = document.querySelector('#favoriteButton');
          if (!userId) {
            btn.parentElement.style.display = 'none';
            return 
          };
          fetch(`/mapart/favorite/${mapId}`)
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to perform action');
              }
              return response.json();
            })
            .then(data => {
              const btn = document.querySelector('#favoriteButton');
              btn.textContent = data.isFavorite ? 'Unfavorite' : 'Favorite';
            })
            .catch(error => console.error('Error checking favorite status:', error));
        }

        function checkLike(userId, mapId) {
          const btn = document.querySelector('#likeButton');
          if (!userId) {
            btn.parentElement.style.display = 'none';
            return 
          };
          fetch(`/mapart/like/${mapId}`)
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to perform action');
              }
              return response.json();
            })
            .then(data => {
              const btn = document.querySelector('#likeButton');
              btn.textContent = data.isLiked ? 'Unlike' : 'Like';
            })
            .catch(error => console.error('Error checking like status:', error));
        }

        document.addEventListener('DOMContentLoaded', () => {
          const mapId = '#{mapId}';
          const userId = '#{userId}';
          const mapContainer = document.getElementById('mapContainer');

          fetch(`/api/mapArt/${mapId}`)
            .then(response => {
              if (!response.ok) {
                throw new Error(response.statusText);
              }
              return response.json();
            })
            .then(map => {
              const imageUrl = `/public/uploads/mapart/${map.imgUrl}`;
              const dateUploaded = map.createdAt ? new Date(map.createdAt).toLocaleString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: 'numeric', minute: 'numeric', hour12: true }) : 'Unknown';
              const showNSFW = getCookie('showNSFW');
              const mapInfo = `
                <div class="jumbotron">
                  <div class="row">
                    <div class="col-md-8 ${showNSFW === 'true' ? '' : (map.nsfw ? 'nsfw' : '')}">
                      <div class="image-wrapper">
                        <img src="${imageUrl}" alt="${mapId}" class="pixelated-image ${showNSFW === 'true' ? '' : (map.nsfw ? 'blurred' : '')}" style="width: 80%; max-width: none; height: auto; border: 1px solid #ddd; border-radius: 5px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);">
                      </div>
                    </div>
                    <div class="col-md-4">
                      ${map.name ? `<h2>${map.name}</h2>` : ''}
                      <h5>${map.displayName}</h5>
                      <br> 
                      <ul class="list-group">
                        <li class="list-group-item">Artist: ${
                          map.artist
                            ? map.artist.split(',')
                              .map(artist => artist.trim())
                              .filter(artist => artist.length > 0)
                              .map(artist => `<a href="/search?query=${artist}">${artist}</a>`)
                              .join(', ')
                            : 'N/A'
                        }</li>
                        <li class="list-group-item">Description: ${map.description || 'N/A'}</li>
                        <li class="list-group-item">Size: ${map.size} (${map.width} x ${map.height})</li>
                        <li class="list-group-item">Uploader: <a href="/profile/user/${map.username}">${map.username}</a></li>
                        <li class="list-group-item">Uploaded: ${dateUploaded}</li>
                        <li class="list-group-item">NSFW: ${map.nsfw}</li>
                        <li class="list-group-item">Views: ${map.views}</li>
                        <li class="list-group-item">Likes: <span id="likeCount">${map.likes}</span></li>
                        <li class="list-group-item"><button class="btn btn-outline-success" id='likeButton' onclick="handleLike('${mapId}')">Like</button> <button class="btn btn-outline-primary" id='favoriteButton' onclick="handleFavorite('${mapId}', 'toggle')">Favorite</button></li>
                      </ul>
                      <br> 
                      <h5><a href="javascript:void(0);" onclick="history.back()">Back</a></h5>
                    </div>
                  </div>
                </div>`;
              mapContainer.innerHTML = mapInfo;
              checkFavorite(userId, mapId);
              checkLike(userId, mapId);
            })
            .catch(error => {
              console.error('Error fetching data:', error);
              mapContainer.innerHTML = '<div class="alert alert-danger" role="alert">Error fetching data: ' + error.message + '</div>';
            });

          function getCookie(name) {
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
              const [cookieName, cookieValue] = cookie.split('=');
              if (cookieName.trim() === name) {
                return decodeURIComponent(cookieValue);
              }
            }
            return '';
          }

        });
  
    include includes/scripts.pug