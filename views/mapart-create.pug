doctype html
html
  - const pageTitle = "MapArt Stitching"
  include includes/head.pug
  body
    include includes/navbar.pug
    script(src="/public/js/joinImages.js")
    div.container.text-center
      h1= pageTitle
      hr 
      if !admin && !mod
        div.alert.alert-danger(role="alert")
          | You are not an administrator or a moderator
      else
        div#container
          .row
            .col
              div.form-group
                label.sr-only(for='width') Width:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Width
                  select#width.form-control
                    for i in [...Array(32).keys()]
                      option(value=`${i+1}`)= `${i+1}`
            .col
              div.form-group
                label.sr-only(for='height') Height:
                div.input-group.mb-2.mr-sm-2
                  div.input-group-prepend
                    div.input-group-text Height
                  select#height.form-control
                    for i in [...Array(32).keys()]
                      option(value=`${i+1}`)= `${i+1}`

          div#inputContainer

          .row
            .col
              div.form-group
                button#fetchImages.btn.btn-primary Fetch and Build MapArt

          hr
          div#outputContainer

      script.
        // Get references to width and height selectors
        const widthSelector = document.getElementById('width');
        const heightSelector = document.getElementById('height');
        const fetchButton = document.getElementById('fetchImages');

        let blobObj = undefined;

        // Add event listener to both selectors to handle changes
        widthSelector.addEventListener('change', generateInputs);
        heightSelector.addEventListener('change', generateInputs);

        // Function to generate text input boxes based on selected dimensions
        function generateInputs() {
          const width = parseInt(widthSelector.value);
          const height = parseInt(heightSelector.value);
          const totalInputs = width * height;

          const container = document.getElementById('inputContainer');
          container.innerHTML = ''; // Clear previous inputs

          for (let i = 0; i < totalInputs; i++) {
            const inputGroup = document.createElement('div');
            inputGroup.classList.add('form-group', 'row');

            // Create rotation selector
            const rotationSelectorContainer = document.createElement('div');
            rotationSelectorContainer.classList.add('col-2'); // Adjusted width to 20%
            const rotationSelector = document.createElement('select');
            rotationSelector.classList.add('form-control');
            for (let j = 0; j < 4; j++) {
              const option = document.createElement('option');
              option.value = j;
              option.textContent = j;
              rotationSelector.appendChild(option);
            }
            rotationSelectorContainer.appendChild(rotationSelector);
            inputGroup.appendChild(rotationSelectorContainer);

            // Create map name input
            const nameInputContainer = document.createElement('div');
            nameInputContainer.classList.add('col-10'); // Adjusted width to 80%
            const nameInput = document.createElement('input');
            nameInput.type = 'text';
            nameInput.classList.add('form-control');
            nameInput.placeholder = `map name ${i + 1}`;
            nameInputContainer.appendChild(nameInput);
            inputGroup.appendChild(nameInputContainer);

            container.appendChild(inputGroup);
          }
        }

        function fetchImages() {
          return new Promise((resolve, reject) => {
            const inputs = document.querySelectorAll('#inputContainer input');
            const rotations = document.querySelectorAll('#inputContainer select');

            const promises = [];

            inputs.forEach((input, index) => {
              const displayName = input.value;
              const rotation = rotations[index].value;
              if (displayName) {
                const promise = fetch(`/api/mapId/name/${displayName}`)
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Network response was not ok');
                    }
                    return response.json();
                  })
                  .then(data => {
                    if (data && data.id && data.imgUrl) {
                      return { id: data.id, imgUrl: `/public/uploads/${data.imgUrl}`, rotation };
                    } else {
                      throw new Error('Invalid data received');
                    }
                  })
                  .catch(error => {
                    console.error('Error fetching data:', error.message);
                    return null;
                  });

                promises.push(promise);
              }
            });

            Promise.all(promises)
              .then(results => {
                // Filter out null results
                const validResults = results.filter(result => result !== null);
                if (validResults.length > 0) {
                  resolve(validResults); // Resolve with array of map objects
                } else {
                  reject(new Error('No valid map data fetched'));
                }
              })
              .catch(error => {
                reject(error);
              });
          });
        }


        fetchButton.addEventListener('click', () => {
          const mapIds = []; // Array to store map IDs
          
          fetchImages()
            .then(mapData => {
              // Ensure mapData is an array
              if (!Array.isArray(mapData)) {
                throw new Error('Map data is not in expected format');
              }

              // Extract map IDs and push them into the array
              mapData.forEach(map => {
                if (map && map.id) {
                  mapIds.push(map.id);
                }
              });

              // console.log(mapIds);

              if (mapIds.length === 0) {
                throw new Error('No map data fetched or map IDs found');
              }
              
              return joinImages(parseInt(widthSelector.value), parseInt(heightSelector.value), mapData.map(map => map.imgUrl), mapData.map(map => map.rotation));
            })
            .then(resultImageUrl => {
              const outputContainer = document.getElementById('outputContainer');
              outputContainer.innerHTML = ""; // Clear output
              const resultImage = document.createElement('img');
              resultImage.src = resultImageUrl;
              outputContainer.appendChild(resultImage);

              const formContainer = document.createElement('div');
              formContainer.classList.add('mt-3');

              const nameInputGroup = document.createElement('div');
              nameInputGroup.classList.add('form-group');
              const nameInput = document.createElement('input');
              nameInput.type = 'text';
              nameInput.classList.add('form-control');
              nameInput.placeholder = 'Map Name';
              nameInputGroup.appendChild(nameInput);

              const descriptionInputGroup = document.createElement('div');
              descriptionInputGroup.classList.add('form-group');
              const descriptionInput = document.createElement('input');
              descriptionInput.type = 'text';
              descriptionInput.classList.add('form-control');
              descriptionInput.placeholder = 'Description';
              descriptionInputGroup.appendChild(descriptionInput);

              const artistInputGroup = document.createElement('div');
              artistInputGroup.classList.add('form-group');
              const artistInput = document.createElement('input');
              artistInput.type = 'text';
              artistInput.classList.add('form-control');
              artistInput.placeholder = 'Artist';
              artistInputGroup.appendChild(artistInput);

              const tagsInputGroup = document.createElement('div');
              tagsInputGroup.classList.add('form-group');
              const tagsInput = document.createElement('input');
              tagsInput.type = 'text';
              tagsInput.classList.add('form-control');
              tagsInput.placeholder = 'Tags (comma-seperated)';
              tagsInputGroup.appendChild(tagsInput);

              const serverInputGroup = document.createElement('div');
              serverInputGroup.classList.add('form-group');
              const serverSelect = document.createElement('select');
              serverSelect.classList.add('form-control');
              serverSelect.placeholder = 'Unique Servers';

              fetch(resultImageUrl)
                .then(response => response.blob())
                .then(resultBlob => {
                  blobObj = resultBlob;
                })
                .catch(error => {
                  console.error('Error fetching blob:', error);
                });

              const fileInput = document.createElement('input');
              fileInput.style.display = 'none';
              fileInput.type = 'file';
              fileInput.name = 'images';
              fileInput.accept = 'image/*';

              fileInput.addEventListener('change', () => {
                const file = fileInput.files[0];
                console.log('Selected file:', file);
              });

              fetch('/mapid/uniqueServers')
                .then(response => response.json())
                .then(data => {
                  data.forEach(server => {
                    const option = document.createElement('option');
                    option.value = server;
                    option.textContent = server;
                    serverSelect.appendChild(option);
                  });
                })
                .catch(error => {
                  console.error('Error fetching unique servers:', error);
                });

              serverInputGroup.appendChild(serverSelect);

              formContainer.appendChild(nameInputGroup);
              formContainer.appendChild(descriptionInputGroup);
              formContainer.appendChild(artistInputGroup);
              formContainer.appendChild(tagsInputGroup);
              formContainer.appendChild(serverInputGroup);
              formContainer.appendChild(fileInput);

              const addButton = document.createElement('button');
              addButton.textContent = 'Add to Database';
              addButton.classList.add('btn', 'btn-primary', 'mt-2');
              addButton.addEventListener('click', () => {

                const formData = new FormData();
                formData.append('name', nameInput.value);
                formData.append('description', descriptionInput.value);
                formData.append('artist', artistInput.value);
                formData.append('server', serverSelect.value);
                formData.append('file', blobObj);
                formData.append('mapIds', JSON.stringify(mapIds));
                // Convert comma-separated values into a JSON array
                const tagsArray = tagsInput.value.split(',').map(tag => tag.trim());
                formData.append('tags', JSON.stringify(tagsArray));

                return fetch('/mapart/create', {
                  method: 'POST',
                  body: formData
                })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Failed to add image to database');
                  }
                  return response.json();
                })
                .then(data => {
                    console.log('Image added to database:', data);
                    const successDiv = document.createElement('div');
                    successDiv.classList.add('alert', 'alert-success');
                    successDiv.style.paddingTop = '10px';
                    
                    const successText = document.createElement('span');
                    successText.textContent = 'Image added to database successfully. Click ';

                    const link = document.createElement('a');
                    link.textContent = 'here';
                    link.href = '/mapart/id/' + data.id;

                    successText.appendChild(link);
                    successText.appendChild(document.createTextNode(' to view.'));

                    successDiv.appendChild(successText);
                    document.getElementById('outputContainer').appendChild(successDiv);

                    document.getElementById('inputContainer').style.display = 'none';
                    document.querySelectorAll('button').forEach(button => {
                        button.style.display = 'none';
                    });
                    document.querySelectorAll('.form-group').forEach(select => {
                        select.style.display = 'none';
                    });
                })
                .catch(error => {
                  console.error('Error adding image to database:', error);
                  const errorDiv = document.createElement('div');
                  errorDiv.classList.add('alert', 'alert-danger');
                  errorDiv.textContent = `Error adding image to database: ${error.message}`;
                  errorDiv.style.paddingTop = '10px';
                  document.getElementById('outputContainer').appendChild(errorDiv);
                  document.getElementById('inputContainer').style.display = 'none';
                  document.querySelectorAll('button').forEach(button => {
                    button.style.display = 'none';
                  });
                  document.querySelectorAll('.form-group').forEach(select => {
                    select.style.display = 'none';
                  });
                });
              });

              formContainer.appendChild(addButton);
              outputContainer.appendChild(formContainer);

            })
            .catch(error => {
              console.error('Error fetching images:', error);
            });
        });

        generateInputs();

      include includes/scripts.pug
