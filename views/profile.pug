doctype html
html
  - const pageTitle = "Profile"
  include includes/head.pug
  body
    include includes/navbar.pug

    div.container
      h1.text-center= pageTitle
      hr
      div.row
        if profile
          div.col-md-4.text-center
            if profile.avatar 
              img.img-fluid.rounded-circle(src=profile.avatar, alt="Profile Avatar", style="width: 128px; height: 128px;")
            h2 #{ profile.username }
            if isAdmin
              span.badge.badge-secondary Admin
            else if isMod
              span.badge.badge-secondary Mod
            p.text-center #{ profile.bio }
            p.text-center Last seen: #{ profile.lastSeen ? profile.lastSeen.toLocaleString('en-US', {month:'2-digit',day:'2-digit',year:'2-digit',hour:'2-digit',minute:'2-digit',hour12:true}) : 'Unknown' }
            if profile.username === username
              a.btn.btn-primary(href="/profile/edit") Edit Profile
            hr
            h3 Details
            p Email: #{ profile.email || 'Unknown' }
            p Location: #{ profile.location || 'Unknown' }
            p Minecraft UUID: #{ profile.mcUuid || 'Unknown' }
            p Joined: #{ profile.createdAt ? profile.createdAt.toLocaleString('en-US', {month:'2-digit',day:'2-digit',year:'2-digit',hour:'2-digit',minute:'2-digit',hour12:true}) : 'Unknown' }
            p Views: #{ profile.views }
          div.col-md-8
            div.row
              div.col-md-6
                h3.text-center Recent Uploads
                ul.list-group
                each map in userMaps.slice(-5).reverse()
                  li.list-group-item.text-center
                    a(href="/mapid/id/" + map.id, target="_blank")
                      | #{ map.displayName }
              div.col-md-6
                h3.text-center Upload Count
                p.text-center(style="font-size: 2em; font-weight: bold; color: #4285f4;") #{ userMaps.length }
            div.row.mt-4
              div.col-md-6
                //h3.text-center Achievements
                //ul.list-group
                  li.list-group-item
                    i.fa.fa-trophy.mr-2
                    | Newfag
                  li.list-group-item
                    i.fa.fa-trophy.mr-2
                    | Died in Spawn
                  li.list-group-item
                    i.fa.fa-trophy.mr-2
                    | Museum Collector

              //div.col
                h3.text-center Favorites
                each map in profile.favorites.slice(-5).reverse()
                  li.list-group-item.text-center
                    a(href="/mapart/id/" + map, target="_blank")
                      | #{ map }
            br
            if username === profile.username
              div.col.text-center
                if admin
                  button.btn.btn-primary(type="button", id="toggleApiKey", onclick="toggleApiKeyVisibility()") Show API Key
                  p#apiKey(style="display: none;") API Key: #{ apiKey }
                if mod
                  button.btn.btn-primary(type="button", id="toggleApiKey", onclick="toggleApiKeyVisibility()") Show API Key
                  p#apiKey(style="display: none;") API Key: #{ apiKey }
                a.btn.btn-danger(href="/user/deleteUser") Delete My Account
              br
              div.col.text-center
                button.btn.btn-primary(type="button", id="toggleNSFWButton", onclick="toggleNSFWCookie()")
                  | Show NSFW
                  span#nsfwStatus

        else
          div.container
            div.alert.alert-danger(role="alert")
              | You are not logged in!

    include includes/scripts.pug
      script.
        // Function to toggle API key
        function toggleApiKeyVisibility() {
          var apiKeyElement = document.getElementById('apiKey');
          var toggleButton = document.getElementById('toggleApiKey');
          
          apiKeyElement.style.display = (apiKeyElement.style.display === 'none') ? 'block' : 'none';
          toggleButton.style.display = 'none';
        }

        document.addEventListener('DOMContentLoaded', () => {
          const nsfwStatusSpan = document.getElementById('nsfwStatus');
          const showNSFW = getCookie('showNSFW');

          if (showNSFW === 'true') {
            nsfwStatusSpan.textContent = ' (Enabled)';
          } else {
            nsfwStatusSpan.textContent = ' (Disabled)';
          }
        });

        // Function to toggle NSFW cookie
        function toggleNSFWCookie() {
          var showNSFW = getCookie('showNSFW');
          showNSFW = (showNSFW === 'true') ? 'false' : 'true';
          document.cookie = 'showNSFW=' + showNSFW + '; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/';
          updateNSFWStatusText(showNSFW);
        }

        // Function to update NSFW status text
        function updateNSFWStatusText(showNSFW) {
          const nsfwStatusSpan = document.getElementById('nsfwStatus');
          nsfwStatusSpan.textContent = (showNSFW === 'true') ? ' (Enabled)' : ' (Disabled)';
        }

        // Function to get cookie value
        function getCookie(name) {
          var value = "; " + document.cookie;
          var parts = value.split("; " + name + "=");
          if (parts.length == 2) return parts.pop().split(";").shift();
        }